how would you modify these scripts in order to compute the frequencyo f each of the quantities
(instead of the number of occurrences)? 
Provide a short answer in plain text (up to half a page)with the name frequency-computation.txt

-------------------------------------------------------------------------------------------------------

The changes needed to modify the scripts so that a frequency would be computed rather than the count of occurrences, are:
 
first we need to understand the difference between the number of occurences and the frequency. The number of occurences are the number
of times the word in question appears in the output file, such as the word "hello" appears for example 40 times in the file. The frequency
of the word in question is just the number of times the word appears in the file divided by the total number of words that are in the file.
That is, the frequency of a word in the file is just how much of the file is composed of the word we are looking at. For example, if
there are 100 words in the file and the word "hello" appears 40 times, then the frequency of the word hello is 40 / 100 = 0.4.

The changes needed in the code in order to compute frequency rather than the number of occurences, are first we would need to create
a counter that counts the number of words in the output file. This could be done by creating a new method in the reducer that goes through
the input line and everytime it splits a word by its key and value, we will add the value to totalCount, by the end of this program we will 
have the total number of words in the file. We then take the return value from the gettotCount() method and pass the return value to the 
reducer code and store it in a variable. We then divide the sum by the totalCount variable to get the frequency

The same idea applies for bigrams and trigrams, but with bigrams the number of 
occurences is the pair of the two words and the frequency is the number of times
that pair appears in the output file divided by the number of pairs in the file.
Trigrams is the exact same idea but with triple pairs.

import sys, re


previous = None
totalCount = gettotCount()
sum = 0

input = open("unigrams.txt", 'w')
for line in sys.stdin:
    key,value =  line.split( '\t' )

    if key != previous:
        if previous is not None:
           input.write ( str( sum / totalCount ) + '\t' + previous + '\n' )
        previous = key
        sum = 0
   # number of occurrences of each word is being calculated
    sum = sum + int(value)

# all we need to do here is a simple division to find the frequency of each word
# sum / totalCount = frequency for that specific word
input.write( str(sum / totalCount) + '\t' + previous + '\n')
input.close()


#this method will find the total count of all of the words in the output from the mapper

def gettotCount():
totalCount = 0
    for line in sys.stdin:
    key,value =  line.split( '\t' )

#everytime we split, we know it must be a word so we add the value which is equal the the number of occurence for that specific word
 to the total number of words and by the end, the totalCount will be equal to all of the words in the output
#the value has already been extracted and is being used to calculate the number of occurences later in the reducer part of the code

    totalCount += value

return totalCount